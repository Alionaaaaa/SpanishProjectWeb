@model Domain.Models.Vocabulary.AudioQuizViewModel

@{
    ViewBag.Title = "Detalii lecție pentru quiz";
    Layout = "_Layout";
}
<style>
    .square-container {
        height: 700px;
        background-color: white;
        display: flex;
        flex-direction: column; /* Puteți alege între "column" sau "row", în funcție de necesități */
        justify-content: center;
        align-items: center;
        border: 10px solid lightgray;
    }

    .small-square {
        height: 500px;
        width: 500px;
        background-color: lightblue;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .question-image {
        height: 450px;
        width: 500px;
        padding: 10px;
        background-color: white;
    }

    .custom-label {
        color: black;
        font-size: larger;
        background-color: white;
        padding: 10px;
        flex: 1;
    }

    .gif-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    /* Stilurile pentru fereastra modală */
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    /* Stilurile pentru conținutul ferestrei modale */
    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 400px; /* Lățime maximă pentru conținut */
        text-align: center; /* Aliniere text la centru */
        position: relative; /* Poziționare relativă pentru a permite centratul */
    }

        /* Stiluri pentru butoanele din fereastra modală */
        .modal-content button {
            background-color: orange; /* Culoare de fundal */
            color: white; /* Culoare text */
            padding: 10px 20px; /* Spațiere între text și margine */
            border: none; /* Eliminare borduri */
            cursor: pointer; /* Indică cursor de tip pointer la hover */
            margin-top: 10px; /* Spațiere între butoane */
        }

            .modal-content button:hover {
                background-color: darkorange; /* Culoare de fundal la hover */
            }

    /* Stil pentru butonul de închidere (X) */
    .close {
        position: absolute;
        top: 10px;
        right: 10px;
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover,
        .close:focus {
            color: black; /* Culoare text la hover/focus */
            text-decoration: none; /* Eliminare subliniere text la hover/focus */
        }


    .question-status-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .question-status-circle {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        margin: 0 10px;
        border: 2px solid black;
    }

    .question-status-correct {
        background-color: green;
    }

    .question-status-incorrect {
        background-color: red;
    }

    .correct-label {
        color: green; /* Culorea textului pentru opțiunea corectă */
    }

    .incorrect-label {
        color: red; /* Culorea textului pentru opțiunea incorectă */
    }


</style>


@if (Model.Questions.Any())
{
    <div class="col-12" style="padding: 10px;">
        <div id="quizContainer" class="square-container">
            <div class="question-status-container">
                @for (var i = 0; i < Model.Questions.Count; i++)
                {
                    <div class="question-status-circle" id="@($"question-status-{i}")"></div>
                }
            </div>

            <div style="display: flex; justify-content: center; align-items: center; width: 100%; padding: 20px;">
                <a href="@Url.Action("LessonDetails", new { id = ViewBag.LessonId })" id="first-circle-link">
                    <div class="circle" style="background-color: #ffb74d; width: 80px; height: 80px; border-radius: 50%; display: flex; justify-content: center; align-items: center;">
                        <img src="/images/Icons vocabulary/walkman.png" alt="Imagine etapa 1" style="max-width: 60%; max-height: 60%;">
                    </div>
                </a>
                <hr style="border-top: 4px dashed #999; height: 0; width: 200px; margin: 0 20px;">
                <div class="circle" style="background-color: #ffb74d; width: 80px; height: 80px; border-radius: 50%; display: flex; justify-content: center; align-items: center;">
                    <img src="/images/Icons vocabulary/joystick.png" alt="Imagine etapa 2" style="max-width: 60%; max-height: 60%;">
                </div>
            </div>

            <div style="display: flex; justify-content: center; width: 100%;">
                <div class="small-square col-11" style="margin-right: 10px; padding: 10px;">
                    <div style="margin-top: 15px; margin-bottom: 15px;">
                        @for (var i = 0; i < Model.Questions.Count; i++)
                        {
                            var question = Model.Questions[i];
                            var correctAnswer = ViewData[$"CorrectAnswer-{i}"] as string;
                            <div class="questionContainer" id="@($"question-{i}")" style="display: @(i == 0 ? "block" : "none")">
                                <div class="col row-1" style="display: flex;">
                                    <div style="position: relative;">
                                        <img src="@question.ImagePath" alt="Imagine întrebare" class="question-image" data-sound-path="@question.SoundSpanishPath" />
                                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
                                            <div style="background-color: white; padding: 10px; border: 2px solid orange; border-radius: 10px;">
                                                <h3 style="color: orange; font-size: 30px; font-weight: bold;">@question.QuestionText</h3>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-5" style="padding:15px; align-items: center;">
                                        <div class="row" style="position: relative; padding-left:20px; align-items: center;">
                                            <form style="display: flex; flex-direction: column;">
                                                @for (var j = 0; j < question.Options.Count; j++)
                                                {
                                                    var option = question.Options[j];
                                                    <div style="display: flex; align-items: center; width: 270px;">
                                                        <input type="radio" id="@($"option-{i}-{j}")" name="@($"answer-{i}")" value="@option" class="option-input" data-sound-romanian-path="@question.SoundRomanianPath">
                                                        <label class="custom-label" for="@($"option-{i}-{j}")">@option</label>
                                                    </div>
                                                }
                                            </form>
                                            <div class="submitAnswerBtn" data-correct-answer="@correctAnswer"></div>
                                            <div id="feedbackMessage"></div>
                                            <div class="gif-container" id="gif-container-@i"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p>Nu există întrebări pentru această lecție.</p>
}

<div id="quizCompletionModal" class="modal" style="display: none;">
    <div class="modal-content" style="width: 300px;">
        <span class="close" onclick="closeModal()">&times;</span>
        <p>Ați terminat quiz-ul!</p>
        <button id="retakeQuizBtn">Refaceți testul</button>
        <button id="viewOtherThemesBtn" onclick="redirectToLessons()">Vizualizați alte teme</button>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        var questionContainers = document.querySelectorAll(".questionContainer");
        var questionStatusCircles = document.querySelectorAll(".question-status-circle");
        var questionImages = document.querySelectorAll(".question-image");
        var firstQuestionSoundPath = document.querySelector(".question-image").getAttribute("data-sound-path");
        var gifs = {
            correct: "/sounds/gif/happy.gif",
            incorrect: "/sounds/gif/sad.gif"
        };

        var audio = new Audio(firstQuestionSoundPath);
        audio.play();

        questionImages.forEach(function (image) {
            image.addEventListener("click", function () {
                var soundPath = this.getAttribute("data-sound-path");
                var audio = new Audio(soundPath);
                audio.play();
            });
        });

        function updateQuestionStatus(currentQuestionIndex, isCorrect) {
            
            
            if (isCorrect) {
                questionStatusCircles[currentQuestionIndex].classList.add("question-status-correct");
                document.getElementById("gif-container-" + currentQuestionIndex).innerHTML = `<img src="${gifs.correct}" alt="correct" width="180" height="180">`;
            } else {
                questionStatusCircles[currentQuestionIndex].classList.add("question-status-incorrect");
                document.getElementById("gif-container-" + currentQuestionIndex).innerHTML = `<img src="${gifs.incorrect}" alt="incorrect" width="180" height="180">`;
            }
        }

        function showNextQuestion(currentQuestionIndex, isCorrect) {
            var nextQuestionIndex = currentQuestionIndex + 1;
            if (nextQuestionIndex < questionContainers.length) {
                questionContainers[currentQuestionIndex].style.display = "none";
                questionContainers[nextQuestionIndex].style.display = "block";

                var soundPath = questionContainers[nextQuestionIndex].querySelector(".question-image").getAttribute("data-sound-path");
                var audio = new Audio(soundPath);
                audio.play();
            } else {
                document.getElementById("feedbackMessage").textContent = "Ați terminat quiz-ul!";
                document.getElementById("feedbackMessage").classList.add("correct");
                document.getElementById("quizCompletionModal").style.display = "block";

                var feedbackImage = document.createElement("img");
                feedbackImage.setAttribute("width", "180");
                feedbackImage.setAttribute("height", "180");
                feedbackImage.setAttribute("src", isCorrect ? "/sounds/gif/happy.gif" : "/sounds/gif/sad.gif");
                document.querySelector(".gif-container").appendChild(feedbackImage);
            }
        }

        questionContainers.forEach((container, index) => {
            container.addEventListener("change", function () {
                var selectedOption = this.querySelector("input[type='radio']:checked");
                var correctAnswer = this.querySelector(".submitAnswerBtn").getAttribute("data-correct-answer");

                if (selectedOption) {
                    var isCorrect = selectedOption.value === correctAnswer;
                    updateQuestionStatus(index, isCorrect);

                    var radioButtons = this.querySelectorAll("input[type='radio']");
                    radioButtons.forEach(function (radio) {
                        radio.disabled = true;
                    });

                    // Adăugați acest cod pentru a adăuga clasele CSS corecte sau incorecte etichetelor
                    var labels = this.querySelectorAll(".custom-label");
                    labels.forEach(function (label) {
                        if (label.textContent === correctAnswer) {
                            label.classList.add("correct-label");
                        } else {
                            label.classList.add("incorrect-label");
                        }
                    });

                    setTimeout(function () {
                        showNextQuestion(index, isCorrect);
                    }, 2000);
                }
            });
        });


        document.getElementById("retakeQuizBtn").addEventListener("click", function () {
            document.getElementById("quizCompletionModal").style.display = "none";
            questionContainers.forEach(container => container.style.display = "none");
            questionContainers[0].style.display = "block";
            document.getElementById("feedbackMessage").textContent = "";
            document.getElementById("feedbackMessage").classList.remove("correct", "incorrect");
            document.querySelectorAll(".gif-container img").forEach(img => img.remove());
        });

        document.getElementById("viewOtherThemesBtn").addEventListener("click", function () {
            redirectToLessons();
        });

        var resetQuizBtn = document.getElementById("retakeQuizBtn");
        if (resetQuizBtn) {
            resetQuizBtn.addEventListener("click", function () {
                resetQuiz();
            });
        }
    });
    function closeModal() {
        var modal = document.getElementById("quizCompletionModal");
        modal.style.display = "none";
    }


    function resetQuiz() {
        document.getElementById("quizCompletionModal").style.display = "none";
        var questionStatusCircles = document.querySelectorAll(".question-status-circle");
        questionStatusCircles.forEach(circle => {
            circle.classList.remove("question-status-correct", "question-status-incorrect");
        });
        var questionContainers = document.querySelectorAll(".questionContainer");
        questionContainers.forEach(container => {
            container.style.display = "none";
        });
        questionContainers[0].style.display = "block";
        document.getElementById("feedbackMessage").textContent = "";
        document.getElementById("feedbackMessage").classList.remove("correct", "incorrect");

        // Eliminăm clasele CSS de la etichetele personalizate
        var labels = document.querySelectorAll(".custom-label");
        labels.forEach(label => {
            label.classList.remove("correct-label", "incorrect-label");
        });

        var selectedOptions = document.querySelectorAll("input[type='radio']:checked");
        selectedOptions.forEach(option => {
            option.checked = false;
        });
        var radioButtons = document.querySelectorAll("input[type='radio']");
        radioButtons.forEach(function (radio) {
            radio.disabled = false;
        });
        var gifContainer = document.querySelector(".gif-container");
        gifContainer.innerHTML = "";
    }

</script>